package com.sumridge.smart.query;

import com.mongodb.BasicDBObject;
import com.mongodb.WriteResult;
import com.sumridge.smart.bean.AccountAggBean;
import com.sumridge.smart.bean.AccountBean;
import com.sumridge.smart.bean.NameBean;
import com.sumridge.smart.entity.CompanyInfo;
import jodd.bean.BeanUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Component;

import java.lang.reflect.Field;
import java.util.List;

/**
 * Created by liu on 16/4/27.
 */
@Component
public class CompanyQuery {
    @Autowired
    private MongoTemplate mongoTemplate;

//    public List<AccountAggBean> queryList() {
//        Aggregation aggregation = Aggregation.newAggregation(
//                Aggregation.group("initial").push(new BasicDBObject("name","$shortName").append("description","$description").append("id","$_id")).as("accounts"));
//
//        AggregationResults<AccountAggBean> result = mongoTemplate.aggregate(aggregation, CompanyInfo.class, AccountAggBean.class);
//
//        return result.getMappedResults();
//    }

    public boolean updateCompanyInfo(CompanyInfo info) {
        Query query = Query.query(Criteria.where("_id").is(info.getId()));
        Update update = new Update();

        for (Field field : info.getClass().getDeclaredFields()) {

            if(field.getName() != "accountInfos" || field.getName() != "id") {
                Object value = BeanUtil.declared.getProperty(info, field.getName());
                update.set(field.getName(), value);
            }
        }
        WriteResult writeResult = mongoTemplate.updateFirst(query, update, CompanyInfo.class);
        return writeResult.isUpdateOfExisting();
    }

    public CompanyInfo queryInfo(String companyId) {
        Query query = Query.query(Criteria.where("_id").is(companyId));
        query.fields().exclude("accountInfos");

        return mongoTemplate.findOne(query, CompanyInfo.class);
    }

    public List<NameBean> queryNameList() {
        Query query = new Query();
        query.fields().include("_id").include("shortName");
        return mongoTemplate.find(query, NameBean.class,"companyInfo");
    }

    //query the company's initial collection add by zj 17/03/24
    public List<AccountBean> queryCompanyInitials(){
        Aggregation aggregation = Aggregation.newAggregation(
            Aggregation.group("$initial"),
            Aggregation.sort(Sort.Direction.ASC, "_id")
        );
        AggregationResults<AccountBean> results = mongoTemplate.aggregate(aggregation, CompanyInfo.class, AccountBean.class);
        return results.getMappedResults();
    }

    //query company by initials
    public AccountAggBean queryCompanyByInitials(String initial, int limit){
        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.match(Criteria.where("initial").is(initial)),
                Aggregation.limit(limit),
                Aggregation.group("$initial").push(new BasicDBObject("name","$shortName").append("description","$description").append("id","$_id")).as("accounts")
        );
        AggregationResults<AccountAggBean> results = mongoTemplate.aggregate(aggregation, CompanyInfo.class, AccountAggBean.class);
        return results.getMappedResults().get(0);
    }
}
