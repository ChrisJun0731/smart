package com.sumridge.smart.controller;

import com.sumridge.smart.bean.ResultBean;
import com.sumridge.smart.domain.CurrentUser;
import com.sumridge.smart.entity.CompanyInfo;
import com.sumridge.smart.service.CompanyService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.Date;

/**
 * Created by liu on 16/4/26.
 */
@RestController
@RequestMapping("/company")
public class CompanyController {
    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyController.class);
    @Autowired
    private CompanyService companyService;

    @RequestMapping(value = "/list")
    public ResultBean getCompanyList(Authentication authentication, @RequestParam("match") String match) {
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            if("".equals(match)){
                match = null;
            }
            ResultBean rs = companyService.getCompanyList(user.getUserInfo(), match);
            return rs;
        } else {
            return new ResultBean();
        }
    }

    @RequestMapping(value = "/names")
    public ResultBean getNameList(Authentication authentication) {
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            ResultBean rs = companyService.getCompanyNameList(user.getUserInfo());
            return rs;
        } else {
            return new ResultBean();
        }
    }

    @RequestMapping(value = "/info", method = RequestMethod.POST)
    public ResultBean createCompany(Authentication authentication,@RequestBody CompanyInfo info) {
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            if(info.getId() == null) {
                info.setCreateDate(new Date());
                info.setCreator(user.getUserInfo().getId());
            }
            ResultBean rs = companyService.saveCompanyInfo(info);
            return rs;
        } else {
            return new ResultBean();
        }

    }

    @RequestMapping(value = "/info")
    public ResultBean getCompany(@RequestParam("id") String companyId) {
        ResultBean rs = companyService.getCompanyInfo(companyId);
        return rs;
    }


    @RequestMapping(method = RequestMethod.POST, value = "/upload")
    public ResultBean uploadFile(Authentication authentication, @RequestParam("file") MultipartFile file) {
        LOGGER.info("file:"+file.getName()+"/"+file.getContentType()+"/"+file.getOriginalFilename()+"/"+file.getSize());
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            ResultBean rs = companyService.saveFile(user.getUserInfo(), file);
            return rs;
        } else {
            return new ResultBean();
        }
    }

    @RequestMapping("/loadMoreCompany")
    public ResultBean laodMoreCompany(Authentication authentication, @RequestParam("initial") String initial, @RequestParam("size") int size,
                                      @RequestParam("match") String match){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        if(currentUser != null){
            if("".equals(match)){
                match = null;
            }
            return companyService.loadMoreCompany(initial, size, match);
        }
        else{
            return new ResultBean();
        }
    }
}
