package com.sumridge.smart.controller;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.sumridge.smart.controller.CompanyController;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sumridge.smart.bean.AccountDetailBean;
import com.sumridge.smart.bean.ResultBean;
import com.sumridge.smart.domain.CurrentUser;
import com.sumridge.smart.entity.PortfolioInfo;
import com.sumridge.smart.service.AccountService;
import com.sumridge.smart.util.CodeUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.mail.Multipart;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * Created by liu on 16/4/25.
 */
@RestController
@RequestMapping("/account")
public class AccountController {

    @Autowired
    private AccountService accountService;

    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyController.class);

    @RequestMapping(value = "/list")
    public ResultBean getAccountList(Authentication authentication, @RequestParam("match") String match) {
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            if("".equals(match)){
                match = null;
            }
            ResultBean rs = accountService.getAccountList(user.getUserInfo(), match);
            return rs;
        } else {
            return new ResultBean();
        }
    }
    @RequestMapping(value = "/info", method = RequestMethod.POST)
    public ResultBean saveAccount(Authentication authentication, @RequestBody AccountDetailBean bean) {
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            if(bean.getId() == null) {
                bean.setCreateDate(new Date());
                bean.setCreator(user.getUserInfo().getId());
            }
            return accountService.saveAccount(bean, CodeUtil.CreateSourceType.FROM_WEB);
        } else {
            return new ResultBean();
        }

    }

    @RequestMapping(value = "/info")
    public ResultBean getAccount(@RequestParam("id") String accountId) {
        ResultBean rs = accountService.getCompanyInfo(accountId);
        return rs;
    }

    @RequestMapping(method = RequestMethod.POST, value = "/upload")
    public ResultBean uploadFile(Authentication authentication, @RequestParam("file") MultipartFile file) {
        LOGGER.info("file:"+file.getName()+"/"+file.getContentType()+"/"+file.getOriginalFilename()+"/"+file.getSize());
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            ResultBean rs = accountService.saveFile(user.getUserInfo(), file);
            return rs;
        } else {
            return new ResultBean();
        }
    }

    @RequestMapping(method = RequestMethod.POST, value = "/map-upload")
    public ResultBean uploadMapFile(Authentication authentication, @RequestParam("file") MultipartFile file) {
        LOGGER.info("file:"+file.getName()+"/"+file.getContentType()+"/"+file.getOriginalFilename()+"/"+file.getSize());
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            ResultBean rs = accountService.saveMapFile(user.getUserInfo(), file);
            return rs;
        } else {
            return new ResultBean();
        }
    }

    //add by zj 16/12/13
    @RequestMapping(method=RequestMethod.POST, value="/portfolio")
    public void addPortfolio(Authentication authentication, @RequestBody PortfolioInfo portfolioInfo){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        if(currentUser != null){
            accountService.addPortfolio(portfolioInfo);
        }
    }


    //add by zj 16/12/14
    @RequestMapping(method=RequestMethod.POST, value="/uploadPortfolio")
    public void uploadPortfolio(Authentication authentication, @RequestParam("file")MultipartFile file, @RequestParam("id") String id,
                                @RequestParam("title") String title){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        if(currentUser != null){
            accountService.uploadPortfolio(id, file, title);
        }
    }

    //add by zj 16/12/15
    @RequestMapping(value="/loadPortfolio")
    public ResultBean loadPortfolio(Authentication authentication, @RequestParam("id") String id){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        if(currentUser != null){
            return accountService.loadPortfolio(id);
        }
        else{
            return new ResultBean();
        }
    }

    //add by zj 16/12/19
    @RequestMapping(value="/updatePortfolio", method=RequestMethod.POST)
    public void updatePortfolio(Authentication authentication, @RequestBody PortfolioInfo portfolio){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        if(currentUser != null){
            accountService.updatePortfolio(portfolio);
        }
    }

    @RequestMapping(value = "/trade-list")
    public ResultBean getAccountTradeList(Authentication authentication, @RequestParam("fromDate") String fromDate, @RequestParam("toDate") String toDate) {
        CurrentUser user = (CurrentUser) authentication.getPrincipal();
        if (user != null) {
            ResultBean rs = accountService.getAccountTradeList(user.getUserInfo(), fromDate, toDate);
            return rs;
        } else {
            return new ResultBean();
        }
    }

    @RequestMapping(value="/accountNames")
    public ResultBean getAccountNames(Authentication authentication){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        if(currentUser != null){
            ResultBean rs = accountService.getAccounts();
            return rs;
        }
        else{
            return new ResultBean();
        }
    }

    @RequestMapping(value="/portfolioTitles")
    public ResultBean getPortfolioTitles(Authentication authentication, @RequestParam("accountIds")String[] accountIds){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        if(currentUser != null){
            return accountService.getPortfolioTitles(accountIds);
        }
        else{
            return new ResultBean();
        }
    }

    //add by zj 17/01/10
    @RequestMapping(value="/matchInfo", method=RequestMethod.GET)
    public ResultBean loadMatchInfo(Authentication authentication, @RequestParam("portfolioTitles") String titles){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        List<String> portfolioTitles = new ArrayList<>();
        if(currentUser != null){
            String[] titleArr = titles.split(",");
            for(int i=0; i<titleArr.length; i++){
                JSONObject object = JSON.parseObject(titleArr[i]);
                String title = (String)object.get("text");
                portfolioTitles.add(title);
            }
            return accountService.loadMatchInfo(portfolioTitles);
        }
        else{
            return new ResultBean();
        }
    }

    @RequestMapping("/loadMore")
    public ResultBean loadMoreAccounts(Authentication authentication, @RequestParam("initial") String initial, @RequestParam("size") int size,
            @RequestParam("match") String match){
        CurrentUser currentUser = (CurrentUser)authentication.getPrincipal();
        if(currentUser != null){
            if("".equals(match)){
                match = null;
            }
            return accountService.loadMoreAccounts(initial, size, match);
        }
        else{
            return new ResultBean();
        }
    }


}
